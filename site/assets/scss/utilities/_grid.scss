// Layout Properties - Grid [Start]
@include _assert-ascending($lib-grid-breakpoint, "$grid-breakpoints");
@include _assert-starts-at-zero($lib-grid-breakpoint, "$grid-breakpoints");
@include _assert-ascending($lib-width-container-max, "$container-max-widths");

@if $enable-grid-classes {
  // Container [Start]
  .container {
    @include make-container();
    @include make-container-max-widths();
  }
  // Container [End]
  // Fluid Container [Start]
  .container-fluid {
    @include make-container();
  }
  // Fluid Container [End]
  // Row [Start]
  .row {
    @include make-row();
  }
  // Row [End]
  // No Gutters [Start]
  .no-gutters {
    margin-right: 0;
    margin-left: 0;

    > .col,
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }
  // No Gutters [End]
}

// Layout Properties - Grid - Column [Start]
@if $enable-grid-classes {
  @include make-grid-columns();
}

// Layout Properties - Grid - Column [End]
// Layout Properties - Grid [End]
// Layout Properties - Flexible Box [Start]
// Layout Properties - Flexible Box - Flex [Start]
@each $breakpoint in map-keys($lib-grid-breakpoint) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $lib-grid-breakpoint);

    .flex#{$infix}-row {
      flex-direction: row !important;
    }

    .flex#{$infix}-column {
      flex-direction: column !important;
    }

    .flex#{$infix}-row-reverse {
      flex-direction: row-reverse !important;
    }

    .flex#{$infix}-column-reverse {
      flex-direction: column-reverse !important;
    }

    .flex#{$infix}-wrap {
      flex-wrap: wrap !important;
    }

    .flex#{$infix}-nowrap {
      flex-wrap: nowrap !important;
    }

    .flex#{$infix}-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }

    .flex#{$infix}-fill {
      flex: 1 1 auto !important;
    }

    .flex#{$infix}-grow-0 {
      flex-grow: 0 !important;
    }

    .flex#{$infix}-grow-1 {
      flex-grow: 1 !important;
    }

    .flex#{$infix}-shrink-0 {
      flex-shrink: 0 !important;
    }

    .flex#{$infix}-shrink-1 {
      flex-shrink: 1 !important;
    }
  }
}

// Layout Properties - Flexible Box - Flex [End]
// Layout Properties - Flexible Box - Align Content [Start]
@each $breakpoint in map-keys($lib-grid-breakpoint) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $lib-grid-breakpoint);

    .align-content#{$infix}-start {
      align-content: flex-start !important;
    }

    .align-content#{$infix}-end {
      align-content: flex-end !important;
    }

    .align-content#{$infix}-center {
      align-content: center !important;
    }

    .align-content#{$infix}-between {
      align-content: space-between !important;
    }

    .align-content#{$infix}-around {
      align-content: space-around !important;
    }

    .align-content#{$infix}-stretch {
      align-content: stretch !important;
    }
  }
}

// Layout Properties - Flexible Box - Align Content [End]
// Layout Properties - Flexible Box - Align Items [Start]
@each $breakpoint in map-keys($lib-grid-breakpoint) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $lib-grid-breakpoint);

    .align-items#{$infix}-start {
      align-items: flex-start !important;
    }

    .align-items#{$infix}-end {
      align-items: flex-end !important;
    }

    .align-items#{$infix}-center {
      align-items: center !important;
    }

    .align-items#{$infix}-baseline {
      align-items: baseline !important;
    }

    .align-items#{$infix}-stretch {
      align-items: stretch !important;
    }
  }
}

// Layout Properties - Flexible Box - Align Items [End]
// Layout Properties - Flexible Box - Align Self [Start]
@each $breakpoint in map-keys($lib-grid-breakpoint) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $lib-grid-breakpoint);

    .align-self#{$infix}-auto {
      align-self: auto !important;
    }

    .align-self#{$infix}-start {
      align-self: flex-start !important;
    }

    .align-self#{$infix}-end {
      align-self: flex-end !important;
    }

    .align-self#{$infix}-center {
      align-self: center !important;
    }

    .align-self#{$infix}-baseline {
      align-self: baseline !important;
    }

    .align-self#{$infix}-stretch {
      align-self: stretch !important;
    }
  }
}

// Layout Properties - Flexible Box - Align Self [End]
// Layout Properties - Flexible Box - Justify Content [Start]
@each $breakpoint in map-keys($lib-grid-breakpoint) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $lib-grid-breakpoint);
    .justify-content#{$infix}-start {
      justify-content: flex-start !important;
    }
    .justify-content#{$infix}-end {
      justify-content: flex-end !important;
    }
    .justify-content#{$infix}-center {
      justify-content: center !important;
    }
    .justify-content#{$infix}-between {
      justify-content: space-between !important;
    }
    .justify-content#{$infix}-around {
      justify-content: space-around !important;
    }
  }
}

// Layout Properties - Flexible Box - Justify Content [End]
// Layout Properties - Flexible Box [End]
