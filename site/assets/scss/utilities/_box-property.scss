@charset "utf-8";
// Box Properties

//
// Box Properties - Dimensions
//

$lib-size-percentage: (
        25: 25%,
        50: 50%,
        75: 75%,
        100: 100%,
        auto: auto
) !default;

@each $prop, $abbrev in (width: w, height: h) {
  @each $size, $length in $lib-size-percentage {
    .#{$abbrev}-#{$size} {
      #{$prop}: $length !important;
    }
  }
}

.mw-100 {
  max-width: 100% !important;
}

.mh-100 {
  max-height: 100% !important;
}

//// Viewport additional helpers
.min-vw-100 {
  min-width: 100vw !important;
}

.min-vh-100 {
  min-height: 100vh !important;
}

.vw-100 {
  width: 100vw !important;
}

.vh-100 {
  height: 100vh !important;
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
  @include deprecate("`size()`", "v4.3.0", "v5");
}

//
// Box Properties - Margin
//

// Box Properties - Margins
@each $breakpoint in map-keys($lib-grid-breakpoint) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $lib-grid-breakpoint);
    @each $size, $length in map-get($lib-spacing, spacing) {
      // Margins
      .m#{$infix}-#{$size} {
        margin: $length !important;
      }

      .mt#{$infix}-#{$size} {
        margin-top: $length !important;
      }

      .mr#{$infix}-#{$size} {
        margin-right: $length !important;
      }

      .mb#{$infix}-#{$size} {
        margin-bottom: $length !important;
      }

      .ml#{$infix}-#{$size} {
        margin-left: $length !important;
      }

      .my#{$infix}-#{$size} {
        margin-top: $length !important;
        margin-bottom: $length !important;
      }

      .mx#{$infix}-#{$size} {
        margin-right: $length !important;
        margin-left: $length !important;
      }
      // Special margin utils
      .m#{$infix}-auto {
        margin: auto !important;
      }

      .mt#{$infix}-auto {
        margin-top: auto !important;
      }

      .mr#{$infix}-auto {
        margin-right: auto !important;
      }

      .mb#{$infix}-auto {
        margin-bottom: auto !important;
      }

      .ml#{$infix}-auto {
        margin-left: auto !important;
      }

      .my#{$infix}-auto {
        margin-top: auto !important;
        margin-bottom: auto !important;
      }

      .mx#{$infix}-auto {
        margin-right: auto !important;
        margin-left: auto !important;
      }
      // Negative margins
      @if $size != 0 {
        .m#{$infix}-n#{$size} {
          margin: -$length !important;
        }

        .mt#{$infix}-n#{$size} {
          margin-top: -$length !important;
        }

        .mr#{$infix}-n#{$size} {
          margin-right: -$length !important;
        }

        .mb#{$infix}-n#{$size} {
          margin-bottom: -$length !important;
        }

        .ml#{$infix}-n#{$size} {
          margin-left: -$length !important;
        }

        .my#{$infix}-n#{$size} {
          margin-top: -$length !important;
          margin-bottom: -$length !important;
        }

        .mx#{$infix}-n#{$size} {
          margin-right: -$length !important;
          margin-left: -$length !important;
        }
      }
    }
  }
}

//
// Box Properties - Padding
//

// Box Properties - Padding
@each $breakpoint in map-keys($lib-grid-breakpoint) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $lib-grid-breakpoint);
    @each $size, $length in map_get($lib-spacing, spacing) {
      // Paddings
      .p#{$infix}-#{$size} {
        padding: $length !important;
      }
      .pt#{$infix}-#{$size} {
        padding-top: $length !important;
      }
      .pr#{$infix}-#{$size} {
        padding-right: $length !important;
      }
      .pb#{$infix}-#{$size} {
        padding-bottom: $length !important;
      }
      .pl#{$infix}-#{$size} {
        padding-left: $length !important;
      }
      .py#{$infix}-#{$size} {
        padding-top: $length !important;
        padding-bottom: $length !important;
      }
      .px#{$infix}-#{$size} {
        padding-right: $length !important;
        padding-left: $length !important;
      }
    }
  }
}

//
// Box Properties - Borders
//

//// Border - Basic Styles
@each $border in (border, border-top, border-right, border-bottom, border-left) {
  .#{$border} {
    #{$border}: get-lib-value($element-box-model, border-width, $size-element-current) solid get-lib-value($lib-theme-palette, $theme-current, ui-03) !important;
  }
}

//// Border - Interactive Styles
@each $border in (border, border-top, border-right, border-bottom, border-left) {
  @each $color, $value in $lib-color-interactive {
    .#{$border}-#{$color} {
      #{$border}-color: $value !important;
    }
  }
}

//// Border - Borderless Styles
@each $border in (border, border-top, border-right, border-bottom, border-left) {
  .#{$border}-0 {
    #{$border}: 0 !important;
  }
}

//
// Box Properties - Border Radius
//

// Mixins
@mixin border-radius($radius:get-lib-value($element-box-model,border-radius,$size-element-current), $fallback-border-radius: false) {
  @if $enable-rounded {
    border-radius: $radius;
  } @else if $fallback-border-radius != false {
    border-radius: $fallback-border-radius;
  }
}

@mixin border-top-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  }
}

@mixin border-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  }
}

@mixin border-bottom-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

@mixin border-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
  }
}

@mixin border-top-left-radius($radius) {
  @if $enable-rounded {
    border-top-left-radius: $radius;
  }
}

@mixin border-top-right-radius($radius) {
  @if $enable-rounded {
    border-top-right-radius: $radius;
  }
}

@mixin border-bottom-right-radius($radius) {
  @if $enable-rounded {
    border-bottom-right-radius: $radius;
  }
}

@mixin border-bottom-left-radius($radius) {
  @if $enable-rounded {
    border-bottom-left-radius: $radius;
  }
}

@each $radius-name, $radius-value in map_get($element-box-model, border-radius) {
  .border-radius-#{$radius-name} {
    border-radius: $radius-value !important;
  }

  .border-radius-top-#{$radius-name} {
    @include border-top-radius($radius-value);
  }

  .border-radius-right-#{$radius-name} {
    @include border-right-radius($radius-value);
  }

  .border-radius-bottom-#{$radius-name} {
    @include border-bottom-radius($radius-value);
  }

  .border-radius-left-#{$radius-name} {
    @include border-left-radius($radius-value);
  }

  .border-radius-top-left-#{$radius-name} {
    @include border-top-left-radius($radius-value);
  }

  .border-radius-top-right-#{$radius-name} {
    @include border-top-right-radius($radius-value);
  }

  .border-radius-bottom-right-#{$radius-name} {
    @include border-bottom-right-radius($radius-value);
  }

  .border-radius-bottom-left-#{$radius-name} {
    @include border-bottom-left-radius($radius-value);
  }
}

//
// Box Properties - Box Shadow
//

@each $size in $lib-size-element {
  @if $enable-component-sizing {
    .box-shadow-#{$size} {
      box-shadow: get-lib-value($lib-layer, box-shadow-component, $size) !important;
    }
  }
}

.shadow-none {
  box-shadow: none !important;
}
